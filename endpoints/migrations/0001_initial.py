# Generated by Django 5.0.2 on 2024-02-27 16:37

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "email",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("account_type", models.CharField(blank=True, max_length=5, null=True)),
                ("password", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "account",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthtokenToken",
            fields=[
                (
                    "key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("created", models.DateTimeField()),
            ],
            options={
                "db_table": "authtoken_token",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.IntegerField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.IntegerField()),
                ("is_active", models.IntegerField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "category_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("image_path", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "category",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.PositiveSmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("file_name", models.CharField(blank=True, max_length=255, null=True)),
                ("file_path", models.CharField(blank=True, max_length=255, null=True)),
                ("file_type", models.CharField(blank=True, max_length=255, null=True)),
                ("upload_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "file",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Gallery",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("image_path", models.CharField(blank=True, max_length=255, null=True)),
                ("no_of_times_opened", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "gallery",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Orders",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("amount", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "orders",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pdfbook",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("amount", models.FloatField(blank=True, null=True)),
                (
                    "author_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "pdf_file_path",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "pdf_image_path",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("pdf_name", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "pdfbook",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("amount", models.FloatField(blank=True, null=True)),
                (
                    "author_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("edited_by", models.CharField(blank=True, max_length=255, null=True)),
                ("number_of_pages", models.IntegerField(blank=True, null=True)),
                (
                    "publication_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("year_of_publication", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "publication",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SubCategory",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("image_path", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sub_category_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "sub_category",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SubSubCategory",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("image_path", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sub_sub_category_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "sub_sub_category",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[
                ("pdf_book_sales", models.IntegerField(blank=True, null=True)),
                ("pdf_books_count", models.IntegerField(blank=True, null=True)),
                ("publications_count", models.IntegerField(blank=True, null=True)),
                ("publications_sales", models.IntegerField(blank=True, null=True)),
                ("ramayana_files_count", models.IntegerField(blank=True, null=True)),
                ("users_count", models.IntegerField(blank=True, null=True)),
                (
                    "account_email",
                    models.OneToOneField(
                        db_column="account_email",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="endpoints.account",
                    ),
                ),
            ],
            options={
                "db_table": "admin",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "address_line1",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "address_line2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("mobile_no", models.CharField(blank=True, max_length=255, null=True)),
                ("pincode", models.CharField(blank=True, max_length=255, null=True)),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                ("username", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "account_email",
                    models.OneToOneField(
                        db_column="account_email",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="endpoints.account",
                    ),
                ),
            ],
            options={
                "db_table": "user",
                "managed": False,
            },
        ),
    ]
